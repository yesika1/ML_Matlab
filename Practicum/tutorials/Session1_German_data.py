# -*- coding: utf-8 -*-
"""jupyter-crash-germancredit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ryx2nZxM7njcw6CtwlqcvXxJZObf-Ps5
"""

import pandas as pd

"""if you want to play with it please download data from google disk and upload it in the next cell"""

from google.colab import files
files.upload()

df = pd.read_csv('germancredit_merged.csv')

df.head()

df = df.drop('Unnamed: 0',axis=1)

df.head()

df.columns

[col.lower().replace(' ','_') for col in df.columns]

df.columns = ['age', 'sex', 'job', 'housing', 'saving_accounts', 'checking_account',
       'credit_amount', 'duration', 'purpose', 'default']

df

df['default'].sum()

df

df['default'].value_counts()

len(df)

df['default'].sum() / len(df)

df['default'].mean()

(10 + 4 + 5) / 3

(1 + 0 + 0 + 0) / 4

df['default'].mean()

"""# We have 30% default rate"""

df['checking_account'].value_counts()

import numpy as np

np.mean([True, False, False])

df['checking_account'].isna().mean()

df['checking_account'] = df['checking_account'].fillna('no_info')

df

# never use python coments
df['checking_account'].value_counts()

"""# We have 40% missing in checking_account

# My conclusion
"""

df

df.pivot_table(index='checking_account',columns=['housing'],values=['default'],aggfunc=['count','mean'])

df.groupby(['checking_account'])['default'].agg(['count','mean'])

df.groupby(['housing'])['default'].agg(['count','mean'])

(df.groupby(['checking_account'])['default']
.agg(['count', 'mean'])
.sort_values('count',ascending=False)
.style
.format({
    'mean': '{:,.1%}'.format,
})
.applymap(
     lambda x: 'background-color : limegreen' if x>0.3 else '', 
     subset=['mean']))

"""# Little and moderate have higher default rate"""

df['credit_amount'].mean()

np.mean([100, 50, 60, 90])

np.mean([100, 50, 60, 90, 9000000000])

np.median([100, 50, 60, 90])

np.median([100, 50, 60, 90, 9000000000])

t = pd.DataFrame({'salary':[100, 50, 60, 90, 9000000000],
                 'name':['a','b','c','d','bill']})

t.sort_values('salary')

t['salary'].median()

df['credit_amount'].mean()

df['credit_amount'].median()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

df['credit_amount'].hist()

df['credit_amount'].agg(['mean','median'])

df['credit_amount'].min()

df['credit_amount'].max()

df['credit_amount'].isna().mean()

df

9999999999999999999999999999999999999999 > np.inf

pd.cut(df['credit_amount'],[0,1000,2000,3000,5000,np.inf]).value_counts()

df['amount_group'] = pd.cut(df['credit_amount'],[0,1000,2000,3000,5000,np.inf])

df.groupby(['amount_group'])['default'].agg(['count','mean'])

df.groupby(['amount_group'])['default'].mean().plot(grid=True)

df

df[['age','credit_amount']].corr()

t = pd.DataFrame({'x':np.linspace(-9,9,100)})

t

t['y'] = t['x'] ** 2

t.set_index('x')['y'].plot(grid=True)

t.corr()

t.set_index('x')['y'].plot(grid=True)

df[['age','credit_amount']].corr()

df[['age','credit_amount']]

df.plot(kind='scatter',x='age',y='credit_amount',alpha=0.1)

df.groupby(['age'])['credit_amount'].agg(['count','mean','median'])

df.groupby(['age'])['credit_amount'].median().plot()

df['age_group'] = pd.cut(df['age'],5)

df.groupby(['age_group'])['credit_amount'].agg(['count','mean','median'])

df.groupby(['age_group'])['credit_amount'].median().plot(grid=True)

"""#"""

df.plot(kind='scatter',x='age',y='credit_amount',alpha=0.1)

